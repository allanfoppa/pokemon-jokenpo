[{"/code/app/src/index.js":"1","/code/app/src/routes.js":"2","/code/app/src/pages/Register/index.js":"3","/code/app/src/pages/Login/index.js":"4","/code/app/src/pages/Home/index.js":"5","/code/app/src/pages/Battle/index.js":"6","/code/app/src/services/api.js":"7","/code/app/src/helpers/handleWithErrorOnSubmit.js":"8"},{"size":220,"mtime":1600966201251,"results":"9","hashOfConfig":"10"},{"size":621,"mtime":1586570168138,"results":"11","hashOfConfig":"10"},{"size":2371,"mtime":1600986532905,"results":"12","hashOfConfig":"10"},{"size":2574,"mtime":1600988471844,"results":"13","hashOfConfig":"10"},{"size":11766,"mtime":1601941539738,"results":"14","hashOfConfig":"10"},{"size":13391,"mtime":1586749980056,"results":"15","hashOfConfig":"10"},{"size":193,"mtime":1600907711508,"results":"16","hashOfConfig":"10"},{"size":291,"mtime":1616607067604,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11ov2z7",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/code/app/src/index.js",[],"/code/app/src/routes.js",[],"/code/app/src/pages/Register/index.js",[],"/code/app/src/pages/Login/index.js",[],"/code/app/src/pages/Home/index.js",["36","37","38","39","40","41"],"import React, { useEffect, useState } from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport backApi from '../../services/api'\nimport { FiTrash2, FiLogOut, FiSearch } from 'react-icons/fi'\nimport axios from 'axios'\n\nimport logoImg from '../../assets/images/pokemon-logo-fontmeme.png'\nimport battleImg from '../../assets/images/pokemon-battle-fontmeme.png'\n\nexport default function Home(){\n    const history = useHistory()\n    const name_saved = localStorage.getItem('trainer_name')\n    console.log(name_saved)\n\n    var isShow = 'display--grid'\n    var isHide = 'display--none'\n\n    const [ trainer_victories, setVictories ] = useState(0)\n    const [ trainer_defeats, setDefeats ] = useState(0)\n    const [ pokemonTeam, setTeam ] = useState([])\n    const [ pokemoninfowanted, setPokemonInfoWanted ] = useState('')\n    const [ hasPokemon, setIsHideOrShow ] = useState('')\n    const [ hasPokemonSearch, setIsHideOrShowSearch ] = useState('')\n    const [ wantedPokemonByName, setWantedPokemonByName ] = useState('')\n    const [ wantedPokemonByNumber, setWantedPokemonByNumber ] = useState('')\n\n    async function handleSearchPokemon(e){\n        e.preventDefault()\n\n        axios.get(`https://pokeapi.co/api/v2/pokemon/` + (wantedPokemonByName !== '' ? wantedPokemonByName : wantedPokemonByNumber))\n        .then(response => {\n            const isTwoTypes = response.data.types\n\n            const p = response.data.id\n            const o = response.data.name\n            const k = response.data.types[0].type.name\n            const e = response.data.sprites.front_default\n            if (isTwoTypes.length > 1) {\n                let mon = response.data.types[1].type.name\n                var arrPokemon = [ p, o, k, e , mon ]\n            } else {\n                var arrPokemon = [ p, o, k, e ]\n            }\n\n            setPokemonInfoWanted(arrPokemon)\n            setIsHideOrShowSearch(isShow)\n        })\n        .catch(function (error) {\n            console.log(error);\n            alert('O pokemon pesquisado nÃ£o existe, tente novamente.')\n        })\n    }\n\n    async function handleHelpSearch(p){\n        axios.get(`https://pokeapi.co/api/v2/pokemon/${p}`)\n            .then(function (response) {\n                const id = 1\n                const name = response.data.name\n                const type1 = response.data.types[0].type.name\n                const img = response.data.sprites.front_default\n\n                const isTwoTypes = response.data.types\n\n                if (isTwoTypes.length > 1) {\n                    var type2 = response.data.types[1].type.name\n                    var pokemoninfowanted = [id, name, type1, img, type2]\n                } else {\n                    var pokemoninfowanted = [id, name, type1, img]\n                }\n\n\n                setPokemonInfoWanted(pokemoninfowanted)\n                \n                setIsHideOrShowSearch(isShow)\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error)\n            })\n    }\n\n    async function handleChoosePokemon(pokeName){\n        const pokemon_name = pokemonTeam[2]\n        const pokemon_trainer = name_saved\n\n        try {\n            await backApi.delete('home', {\n                headers: {\n                    PokemonTrainer: pokemon_trainer,\n                    PokemonName: pokemon_name,\n                },\n            })\n\n            axios.get(`https://pokeapi.co/api/v2/pokemon/${pokeName}`)\n            .then(function (response) {\n                const id = response.data.id\n                const name = response.data.name\n                const type1 = response.data.types[0].type.name\n                const img = response.data.sprites.front_default\n\n                const isTwoTypes = response.data.types\n\n                if (isTwoTypes.length > 1) {\n                    var type2 = response.data.types[1].type.name\n                    var pokemoninfo = [id, img, name, type1, type2]\n                } else {\n                    var pokemoninfo = [id, img, name, type1]\n                }\n\n                setTeam(pokemoninfo)\n                \n                setIsHideOrShow(isShow)\n\n                const data = {\n                    pokemon_name: name\n                }\n\n                backApi.post('home', data, {\n                    headers: {\n                        PokemonTrainer: pokemon_trainer,\n                    },\n                })\n                .then(function (response) {\n\n                })\n                .catch(function (error) {\n                    // handle error\n                    console.log(error)\n                })\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error)\n            })\n            \n        } catch (error) {\n            alert(error)\n        }\n\n\n    }\n\n    function handleLogout() {\n        localStorage.clear()\n\n        history.push('/')\n    }\n\n    function handleIfHasSavedPokemon(pokemonName){\n        axios.get(`https://pokeapi.co/api/v2/pokemon/${pokemonName}`)\n        .then(function (response) {\n            const id = 1\n            const name = response.data.name\n            const type1 = response.data.types[0].type.name\n            const img = response.data.sprites.front_default\n\n            const isTwoTypes = response.data.types\n\n            if (isTwoTypes.length > 1) {\n                var type2 = response.data.types[1].type.name\n                var pokemoninfo = [id, img, name, type1, type2]\n            } else {\n                var pokemoninfo = [id, img, name, type1]\n            }\n            setIsHideOrShow(isShow)\n            setTeam(pokemoninfo)                \n        })\n        .catch(function (error) {\n            console.log(error)\n        })\n    }\n\n    async function handleDeletePokemon(){\n        const pokemon_name = pokemonTeam[2]\n        const pokemon_trainer = name_saved\n\n        try {\n            await backApi.delete('home', {\n                headers: {\n                    PokemonTrainer: pokemon_trainer,\n                    PokemonName: pokemon_name,\n                },\n            })\n            setIsHideOrShow(isHide)\n            cleanFormValues()\n        } catch (error) {\n            console.log(error)\n        } \n    }\n\n    useEffect(() => {\n        backApi.get('home', {\n            headers: {\n                PokemonTrainer: name_saved,\n            }\n        }).then(response => {\n            console.log(response)\n            setVictories(response.data[0].trainer_victories)\n            setDefeats(response.data[0].trainer_defeats)\n\n            const trainerHasPokemon = response.data[0].pokemon\n\n            if (trainerHasPokemon != '') {\n                handleIfHasSavedPokemon(response.data[0].pokemon)\n            } else {\n                setIsHideOrShow(isHide)\n            }\n        })\n    }, [name_saved])\n\n    function cleanFormValues() {\n        setWantedPokemonByName('')\n        setWantedPokemonByNumber('')\n    }\n\n    return(\n        <section className=\"i-choose-you\">\n            <header className=\"header-app\">\n                <div>\n                    <img src={logoImg} alt=\"Pokemon JoKenPo\" className=\"header-app-logo\"/>\n                    <h1 className=\"trainer-home--info\">Trainer: {name_saved} W:{trainer_victories} L:{trainer_defeats} | <FiLogOut onClick={handleLogout}></FiLogOut></h1>\n                </div>\n                <Link to={{ pathname: '/batalha', pokemonProps: { pokemon: pokemonTeam[2] } }}>\n                    <img src={battleImg} alt=\"Ir para a batalha\" className={\"battle-image display--none \" + hasPokemon} />\n                </Link>\n            </header>\n            <aside className=\"filters\">\n                <h4 className=\"trainer-home--title-filter\">FILTERS</h4>\n                {/* TODO: Colocar um cookie para usuÃ¡rios que nao queiram ver isso */}\n                <p className=\"sugestion-text\">Don't you know pokÃ©mon? here are some suggestions to get started</p>\n                <ul className=\"sugestion-list\">\n                    <li onClick={() => handleHelpSearch('bulbasaur')}>bulbasaur</li>\n                    <li onClick={() => handleHelpSearch('charmander')}>charmander</li>\n                    <li onClick={() => handleHelpSearch('squirtle')}>squirtle</li>\n                    <li onClick={() => handleHelpSearch('48')}>48</li>\n                    <li onClick={() => handleHelpSearch('96')}>96</li>\n                    <li onClick={() => handleHelpSearch('698')}>698</li>\n                </ul>\n\n                <form onSubmit={handleSearchPokemon} id=\"search-pokemon-form\" className=\"search-pokemon-form\">\n\n                    <label className=\"trainer-home--label-filter\">By name</label>\n                    <input\n                        type=\"text\"\n                        className=\"login-container__inner-input\"\n                        value={wantedPokemonByName}\n                        onChange={e => setWantedPokemonByName(e.target.value)}\n                        onFocus={cleanFormValues}\n                    />\n\n                    <label className=\"trainer-home--label-filter\">By Number</label>\n                    <input\n                        data-cy=\"search-pokemon-by-number\"\n                        type=\"text\"\n                        className=\"login-container__inner-input\"\n                        value={wantedPokemonByNumber}\n                        onChange={e => setWantedPokemonByNumber(e.target.value)}\n                        onFocus={cleanFormValues}\n                    />\n\n                    <button\n                        data-cy=\"press-button\"\n                        onClick={handleSearchPokemon}\n                        className=\"button-alt\">\n                        <FiSearch width='16px' className=\"icon-alt\"></FiSearch>\n                        search\n                    </button>\n                </form>\n\n                <div className={\"current-pokemon \" + hasPokemon}>\n                    <h4 className=\"trainer-home--title-filter\">CURRENT POKÃMON</h4>\n                    <ul>\n                        <li key={pokemonTeam[0]}>\n                            <div className=\"current-pokemon-inner-container\">\n                                <img src={pokemonTeam[1]} alt={pokemonTeam[2]} className=\"current-pokemon-image\"/>\n                                <div>\n                                    <p className=\"current-pokemon-name\">{pokemonTeam[2]} <FiTrash2 onClick={handleDeletePokemon} width=\"16\" color=\"#FF0000\"></FiTrash2></p>\n                                    <span className={'type-' + pokemonTeam[3]}>{pokemonTeam[3]}</span>\n                                    <span className={'type-' + pokemonTeam[4]}>{pokemonTeam[4]}</span>\n                                </div>\n                            </div>\n                        </li>\n                    </ul>\n                </div>\n            </aside>\n            <main className={\"pokemon-team \" + hasPokemonSearch}>\n                <div>\n                    <div>\n                        <p className=\"pokemon-name-info\">{pokemoninfowanted[1]} <span className=\"pokemon-number-info\">NÂº {pokemoninfowanted[0]}</span></p>\n                        <span className={'type-' + pokemoninfowanted[2]}>{pokemoninfowanted[2]}</span>\n                        <span className={'type-' + pokemoninfowanted[4]}>{pokemoninfowanted[4]}</span>\n                    </div>\n                    <div>\n                        <img src={pokemoninfowanted[3]} alt={pokemoninfowanted[1]} className=\"current-pokemon-image\"/>\n                    </div>\n\n                    <button className=\"pokemon-choose button\" onClick={() => handleChoosePokemon(pokemoninfowanted[1])}>I choose you</button>\n                </div>\n                <div></div>\n            </main>\n        </section>\n    )\n}","/code/app/src/pages/Battle/index.js",["42","43","44","45","46","47"],"import React, { useState, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport backApi from '../../services/api'\nimport './styles-battle.css'\nimport axios from 'axios'\n\nimport vsImg from '../../assets/images/pokemon-vs-80-fontmeme.png'\nimport rock from '../../assets/images/pokemon-rock-fontmeme.png'\nimport paper from '../../assets/images/pokemon-paper-fontmeme.png'\nimport scissors from '../../assets/images/pokemon-scissors-fontmeme.png'\n\nexport default function Battle(props) {\n    const history = useHistory()\n    const name_saved = localStorage.getItem('trainer_name')\n    \n    const choose = 'Choose your move:'\n    const yourChoose = 'used: '\n    \n    var isShow = 'display--grid'\n    var isHide = 'display--none'\n\n    const half = 'filler-half'\n    const danger = 'filler-danger'\n    const empty = 'filler-empty'\n\n    const [ pokemonPlayerOne, setpokemonPlayerOne ] = useState([])\n    const [ pokemonPlayerCPU, setpokemonPlayerCPU ] = useState([])\n    const [ pokemonMoves, setpokemonMoves ] = useState('')\n    const [ battleText, setbattleText ] = useState('')\n    const [ playerChoiceImage, setplayerChoiceImage ] = useState('')\n    const [ cpuChoiceImage, setcpuChoiceImage ] = useState('')\n    const [ showOrHide, setshowOrHide ] = useState('')\n    const [ p1HPCount, setP1HPCount ] = useState(2)\n    const [ cpuHPCount, setCpuHPCount ] = useState(2)\n    const [ p1HP, setP1HP ] = useState('')\n    const [ cpuHP, setCpuHP ] = useState('')\n    \n    const pokemonP1 = () => {\n        const pokemonName = Object.values(props.location.pokemonProps)\n        axios.get(`https://pokeapi.co/api/v2/pokemon/${pokemonName}`)\n        .then(function(response) {\n            \n            let name = response.data.name\n            let image = response.data.sprites.back_default\n            \n            const data = [\n                name,\n                image\n            ]\n\n            setpokemonPlayerOne(data)\n\n            const entry = \"Go! \" + name + '!'\n            setbattleText(entry)\n            entryBattle()\n        })\n    }\n\n    const pokemonCPU = () => {\n        const pokemonCPUNumber = Math.floor(Math.random() * 807)\n        axios.get(`https://pokeapi.co/api/v2/pokemon/${pokemonCPUNumber}`)\n        .then(function(response) {\n            \n            let name = response.data.name\n            let image = response.data.sprites.front_default\n            \n            const data = [\n                name,\n                image\n            ]\n\n            setpokemonPlayerCPU(data)\n        })\n\n    }\n\n    function entryBattle(){\n        setTimeout(function() {\n            setbattleText(choose)\n            setpokemonMoves(isShow)\n        }, 3000)\n    }\n\n    function handleLoseBattle(){\n        \n        localStorage.setItem('result', 'lose')\n        const result = localStorage.getItem('result')\n        \n        backApi.put('/batalha', result, {\n            headers: {\n                PokemonTrainer: name_saved,\n                Result: result\n            },\n        })\n        .then(function(response){\n            setbattleText(response.data.message)\n            localStorage.removeItem('result')\n        })\n        .catch(function(error) {\n            console.log(error)\n        })\n        \n        setTimeout(() => {\n            history.push('/home')\n        }, 4000);\n\n    }\n\n    function handleWinBattle(){\n        \n        localStorage.setItem('result', 'win')\n        const result = localStorage.getItem('result')\n        \n        backApi.put('/batalha', result, {\n            headers: {\n                PokemonTrainer: name_saved,\n                Result: result\n            },\n        })\n        .then(function(response){\n            setbattleText(response.data.message)\n            localStorage.removeItem('result')\n        })\n        .catch(function(error) {\n            console.log(error)\n        })\n        \n        setTimeout(() => {\n            history.push('/home')\n        }, 4000);\n\n    }\n\n    useEffect(()=>{\n        pokemonP1()\n        pokemonCPU()\n    }, [])\n\n\n    function handleBattle(firstPlayerChoice) {\n        // Diminui a vida do player one\n        function decrementP1HPCount(){\n            setP1HPCount(p1HPCount - 1)\n\n            if (p1HPCount === 2) {\n                setP1HP(half)\n            } else if (p1HPCount === 1) {\n                setP1HP(danger)\n            } else if (p1HPCount === 0) {\n                setP1HP(empty)\n                handleLoseBattle()\n            }\n        }\n        \n        // Diminui a vida da mÃ¡quina\n        function decrementCpuHPCount(){\n            setCpuHPCount(cpuHPCount - 1)\n\n            if (cpuHPCount === 2) {\n                setCpuHP(half)\n            } else if (cpuHPCount === 1) {\n                setCpuHP(danger)\n            } else if (cpuHPCount === 0) {\n                setCpuHP(empty)\n                handleWinBattle()\n            }\n        }\n\n        // Imagens das escolhas\n        const moves = { rock, paper, scissors }\n    \n        // Escolha da CPU\n        const arrComputerChoice = [\"rock\", \"paper\", \"scissors\"];\n        const computerChoice = arrComputerChoice[Math.floor(Math.random() * arrComputerChoice.length)];\n\n        const winRound = firstPlayerChoice + ' beats ' + computerChoice\n        const loseRound = firstPlayerChoice + ' loses ' + computerChoice\n        const tieRound = firstPlayerChoice + ' tied ' + computerChoice\n\n        // Esconde as escolhas do Player 1\n        setpokemonMoves(isHide)\n        // Mostra o texto com a escolha\n        setbattleText(yourChoose + firstPlayerChoice)\n\n        // Imprimi as escolhas com imagens na tela\n        if (firstPlayerChoice === 'rock') {\n            setplayerChoiceImage(moves.rock)\n        } else if (firstPlayerChoice === 'paper') {\n            setplayerChoiceImage(moves.paper)\n        } else {\n            setplayerChoiceImage(moves.scissors)\n        }\n\n        if (computerChoice === 'rock') {\n            setcpuChoiceImage(moves.rock)\n        } else if (computerChoice === 'paper') {\n            setcpuChoiceImage(moves.paper)\n        } else {\n            setcpuChoiceImage(moves.scissors)\n        }\n\n        // Mostra as escolhas na tela\n        setshowOrHide(isShow)\n\n        if (firstPlayerChoice === computerChoice) {\n            \n            // Msg de empate\n            setbattleText(tieRound)\n            setTimeout(() => {\n                // Esconde as escolhas\n                setshowOrHide(isHide)\n                // Colocar o texto para escolher\n                setbattleText(choose)\n                // Mostrar as escolhas para o p1\n                setpokemonMoves(isShow)\n            }, 4000);\n\n        } else if (firstPlayerChoice === \"rock\") {\n            switch (computerChoice) {\n                case \"scissors\":\n                    // Msg vencedora no round\n                    setbattleText(winRound)\n                    // Fazer o dano na mÃ¡quina\n                    decrementCpuHPCount()\n                    // Voltar para prÃ³ximo round\n                    setTimeout(() => {\n                        // Esconde as escolhas\n                        setshowOrHide(isHide)\n                        // Colocar o texto para escolher\n                        setbattleText(choose)\n                        // Mostrar as escolhas para o p1\n                        setpokemonMoves(isShow)\n                    }, 4000);\n                    break;\n                case \"paper\":\n                    // Msg perdedora no round\n                    setbattleText(loseRound)\n                    // Fazer o dano no p1\n                    decrementP1HPCount()\n                    // Voltar para prÃ³ximo round\n                    setTimeout(() => {\n                        // Esconde as escolhas\n                        setshowOrHide(isHide)\n                        // Colocar o texto para escolher\n                        setbattleText(choose)\n                        // Mostrar as escolhas para o p1\n                        setpokemonMoves(isShow)\n                    }, 4000);\n                break;\n            }\n\n        } else if (firstPlayerChoice === \"paper\") {\n\n            // If the player chooses \"Paper\"\n            switch (computerChoice) {\n                case \"rock\":\n                    // Msg vencedora no round\n                    setbattleText(winRound)\n                    // Fazer o dano na mÃ¡quina\n                    decrementCpuHPCount()\n                    // Voltar para prÃ³ximo round\n                    setTimeout(() => {\n                        // Esconde as escolhas\n                        setshowOrHide(isHide)\n                        // Colocar o texto para escolher\n                        setbattleText(choose)\n                        // Mostrar as escolhas para o p1\n                        setpokemonMoves(isShow)\n                    }, 4000);\n                break;\n                case \"scissors\":\n                    // Msg perdedora no round\n                    setbattleText(loseRound)\n                    // Fazer o dano no p1\n                    decrementP1HPCount()\n                    // Voltar para prÃ³ximo round\n                    setTimeout(() => {\n                        // Esconde as escolhas\n                        setshowOrHide(isHide)\n                        // Colocar o texto para escolher\n                        setbattleText(choose)\n                        // Mostrar as escolhas para o p1\n                        setpokemonMoves(isShow)\n                    }, 4000);\n                break;\n\n            }\n\n        } else {\n\n            // If the player chooses \"Scissors\"\n            switch (computerChoice) {\n                case \"paper\":\n                    // Msg vencedora no round\n                    setbattleText(winRound)\n                    // Fazer o dano na mÃ¡quina\n                    decrementCpuHPCount()\n                    // Voltar para prÃ³ximo round\n                    setTimeout(() => {\n                        // Esconde as escolhas\n                        setshowOrHide(isHide)\n                        // Colocar o texto para escolher\n                        setbattleText(choose)\n                        // Mostrar as escolhas para o p1\n                        setpokemonMoves(isShow)\n                    }, 4000);\n                break;\n                case \"rock\":\n                    // Msg perdedora no round\n                    setbattleText(loseRound)\n                    // Fazer o dano no p1\n                    decrementP1HPCount()\n                    // Voltar para prÃ³ximo round\n                    setTimeout(() => {\n                        // Esconde as escolhas\n                        setshowOrHide(isHide)\n                        // Colocar o texto para escolher\n                        setbattleText(choose)\n                        // Mostrar as escolhas para o p1\n                        setpokemonMoves(isShow)\n                    }, 4000);\n                break;\n            }\n\n        }\n\n\n    }\n\n    return(\n        <section className=\"battle-section\">\n            <div className={\"player-choice display--none \" + showOrHide}>\n                <img src={playerChoiceImage} alt=\"\" />\n                <img src={vsImg} alt=\"\" />\n                <img src={cpuChoiceImage} alt=\"\" />\n            </div>\n            <div className=\"info-pk-cpu\">\n                <p className=\"battle-pokemon-name\">{pokemonPlayerCPU[0]} <span>:L100</span></p>\n                <div className=\"info-pk-cpu-stats\">\n                    <span>HP:</span>\n                    <div className=\"progress-bar\">\n                        <div className={\"filler-full \" + cpuHP}></div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"pk-cpu\">\n                <div className=\"battle-ground\">\n                    <img src={pokemonPlayerCPU[1]} className=\"battle-pokemon-image\"/>\n                </div>\n            </div>\n            <div className=\"pk-p1\">\n                <img src={pokemonPlayerOne[1]} className=\"battle-pokemon-image\"/>\n            </div>\n            <div className=\"info-pk-p1\">\n                <p className=\"battle-pokemon-name\"><span id=\"js-battle-pokemon-name\">{pokemonPlayerOne[0]}</span> <span>:L100</span></p>\n                <div className=\"info-pk-p1-stats\">\n                    <span>HP:</span>\n                    <div className=\"progress-bar\">\n                        <div className={\"filler-full \" + p1HP}></div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"msg\">\n                <div className=\"msg-middle-border\">\n                    <div className=\"msg-inner-border msg-container\">\n                        <div id=\"js-message\" className=\"message\">{battleText}</div>\n                        <div className={\"moves-container \" + pokemonMoves}>\n                            <ul className=\"moves\">\n                                <li className=\"move--choose\" onClick={() => handleBattle('rock')}>Rock</li>\n                                <li className=\"move--choose\" onClick={() => handleBattle('paper')}>Paper</li>\n                                <li className=\"move--choose\" onClick={() => handleBattle('scissors')}>Scissors</li>\n                                <li className=\"move--choose\" onClick={handleLoseBattle}>Quit</li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n    )\n}","/code/app/src/services/api.js",[],"/code/app/src/helpers/handleWithErrorOnSubmit.js",[],{"ruleId":"48","severity":1,"message":"49","line":42,"column":21,"nodeType":"50","messageId":"51","endLine":42,"endColumn":31},{"ruleId":"48","severity":1,"message":"52","line":68,"column":25,"nodeType":"50","messageId":"51","endLine":68,"endColumn":42},{"ruleId":"48","severity":1,"message":"53","line":107,"column":25,"nodeType":"50","messageId":"51","endLine":107,"endColumn":36},{"ruleId":"48","severity":1,"message":"53","line":163,"column":21,"nodeType":"50","messageId":"51","endLine":163,"endColumn":32},{"ruleId":"54","severity":1,"message":"55","line":203,"column":35,"nodeType":"56","messageId":"57","endLine":203,"endColumn":37},{"ruleId":"58","severity":1,"message":"59","line":209,"column":8,"nodeType":"60","endLine":209,"endColumn":20,"suggestions":"61"},{"ruleId":"58","severity":1,"message":"62","line":137,"column":8,"nodeType":"60","endLine":137,"endColumn":10,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":219,"column":13,"nodeType":"66","messageId":"67","endLine":250,"endColumn":14},{"ruleId":"64","severity":1,"message":"65","line":255,"column":13,"nodeType":"66","messageId":"67","endLine":287,"endColumn":14},{"ruleId":"64","severity":1,"message":"65","line":292,"column":13,"nodeType":"66","messageId":"67","endLine":323,"endColumn":14},{"ruleId":"68","severity":1,"message":"69","line":348,"column":21,"nodeType":"70","endLine":348,"endColumn":86},{"ruleId":"68","severity":1,"message":"69","line":352,"column":17,"nodeType":"70","endLine":352,"endColumn":82},"no-redeclare","'arrPokemon' is already defined.","Identifier","redeclared","'pokemoninfowanted' is already defined.","'pokemoninfo' is already defined.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleIfHasSavedPokemon' and 'isHide'. Either include them or remove the dependency array.","ArrayExpression",["71"],"React Hook useEffect has a missing dependency: 'pokemonP1'. Either include it or remove the dependency array.",["72"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},"Update the dependencies array to be: [handleIfHasSavedPokemon, isHide, name_saved]",{"range":"77","text":"78"},"Update the dependencies array to be: [pokemonP1]",{"range":"79","text":"80"},[6836,6848],"[handleIfHasSavedPokemon, isHide, name_saved]",[4018,4020],"[pokemonP1]"]